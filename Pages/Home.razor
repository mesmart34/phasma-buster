@page "/"
@using PhasmaBuster.Data.Common

<aside class="meta-drawer">
    <div id="sidepanel" class="meta-sidepanel meta-drawer-body">
        <div class="meta-drawer-header">
            <div class="meta-drawer-title">
                <h2 class="meta-cursive meta-my-0 meta-font-size-h2 meta-line-height-24">@_currentGhost?.Name</h2>
                <button class="closebtn meta-button meta-text-gray-900" @onclick="@CloseNav">
                    <span class="gl-button-text">
                        &times
                    </span>
                </button>
            </div>
        </div>
        <div class="meta-mx-1">
            <div class="meta-display-flex meta-align-items-center meta-line-height-20 meta-text-gray-900 meta-font-weight-bold">
                <span>Признаки</span>
                @* <button class="meta-button meta-text-gray-900" style="margin-left: auto; margin-right: -0.25rem;"> *@
                @*     <span class="meta-button-text"> *@
                @*         Изменить *@
                @*     </span> *@
                @* </button> *@
            </div>
            <div class="meta-mt-1 meta-display-flex meta-flex-wrap meta-text-gray-800 meta-flex-direction-column">
                <div class="meta-issuable-files meta-display-grid meta-align-items-center meta-w-full meta-mb-3">
                    <div>
                        <div style="overflow-y: auto;">
                            @{
                                if (_currentGhost != null)
                                {
                                    foreach (var evidenceGroup in _currentGhost.Evidences
                                                 .GroupBy(x => x.Key)
                                                 .OrderBy(x => x.Key)
                                                 .Where(x => x.Key != EvidenceType.Standard)
                                                 .ToDictionary(x => x.Key, x => x.SelectMany(x => x.Value)))
                                    {
                                        <div style="font-size: 1.0rem;">
                                            <p class="noselect">
                                                @Localization[evidenceGroup.Key.GetCaption()]
                                            </p>
                                        </div>
                                        foreach (var hiddenEvidence in evidenceGroup.Value)
                                        {
                                            <div style="font-size: 0.9rem;">
                                                <p class="noselect description-text">
                                                    - @hiddenEvidence.Description?.Text
                                                </p>
                                                @if (!string.IsNullOrEmpty(hiddenEvidence.Description?.FilePath))
                                                {
                                                    switch (hiddenEvidence.Description.EvidenceDescriptionType)
                                                    {
                                                        case EvidenceDescriptionType.Video:
                                                            <RadzenIcon Icon="videocam" class="noselect"/>
                                                            break;
                                                        case EvidenceDescriptionType.Audio:
                                                            <audio id="sound" src="@($"/media/{hiddenEvidence.Description.FilePath}")"></audio>
                                                            <RadzenIcon Icon="volume_up"
                                                                        class="noselect"
                                                                        @onclick="@(async () => await Js.InvokeAsync<string>("PlayAudio", "sound"))"/>
                                                            break;
                                                        case EvidenceDescriptionType.Picture:
                                                            <RadzenIcon Icon="image" class="noselect"/>
                                                            break;
                                                    }
                                                }
                                            </div>
                                            <br/>
                                        }
                                    }
                                }
                            }
                        </div>
                        
                        @* @{ *@
                        @*     if (_currentGhost != null) *@
                        @*     { *@
                        @*         foreach (var evidence in _currentGhost.Evidences[EvidenceType.Standard]) *@
                        @*         { *@
                        @*             if (evidence.Name != null) *@
                        @*             { *@
                        @*                 <div class="meta-display-flex"> *@
                        @*                     <RadzenIcon Icon="@(evidence.IconName)" *@
                        @*                                 class="mx-2 noselect"/> *@
                        @*                     <a class="meta-label-link meta-label-link-have-image"> *@
                        @*                         @Localization[evidence.Name] *@
                        @*                     </a> *@
                        @*                 </div> *@
                        @*             } *@
                        @*         } *@
                        @*     } *@
                        @* } *@
                    </div>
                </div>    
            </div>
            <div class="meta-sidebar-buttons">
                @* <button class="meta-title-button meta-button meta-text-gray-900"> *@
                @*     <span class="meta-button-text"> *@
                @*         Скачать файл *@
                @*         <RadzenIcon Icon="download" class="meta-download-icon"></RadzenIcon> *@
                @*     </span> *@
                @* </button> *@
            </div>
        </div>
    </div>
</aside>

<div class="win-grid">
    <div class="grid">
        @foreach (var modelGhost in _model.Ghosts)
        {
            var color = "color: rgba(255, 255, 255, 0.5)";
            @if (!IsVisible(modelGhost))
            {
                continue;
            }
            
            //@onclick:stopPropagation="true"
            <div class="m-1 ghost-radius" style="width: 30rem; height: 12rem;justify-self: center;"
                 @onclick="@(async () => { _currentGhost = modelGhost; await OpenNav(); })">
                <div class="win-btn ghost-radius ghost-background" id="9" style="width: 100%; height: 100%; padding: 0;">
                    <div class="row">
                        <div class="col-6">
                            <RadzenStack Orientation="Orientation.Vertical"
                                         JustifyContent="JustifyContent.SpaceBetween"
                                         Style="background: transparent;">
                                <div class="my-auto w-100 text-center">
                                    <RadzenText Text="@modelGhost.Name"
                                                TextStyle="TextStyle.H5"
                                                Style="@color"
                                                class="noselect"/>
                                </div>
                                <div class="my-auto w-100 d-flex justify-content-center">
                                    @foreach (var evidence in modelGhost.Evidences[EvidenceType.Standard])
                                    {
                                        if (evidence.Name != null)
                                        {
                                            <RadzenIcon Icon="@(evidence.IconName)"
                                                        class="mx-2 noselect"
                                                        title="@Localization[evidence.Name]"/>   
                                        }
                                    }
                                </div>
                                <RadzenPanel class="my-auto panel">
                                    <div class="d-flex justify-content-between">
                                        <div class="d-flex" style="font-size: 0.9rem">
                                            <RadzenIcon Icon="psychology_alt" class="noselect"/>
                                                <p class="noselect">
                                                    @modelGhost.SanityValues?.FirstOrDefault()
                                                    %
                                                </p>
                                        </div>
                                        <div class="d-flex" style="font-size: 0.9rem">
                                            <RadzenIcon Icon="directions_run" class="noselect"/>
                                                <p class="noselect">
                                                    @modelGhost.SpeedValues?.FirstOrDefault()
                                                </p>
                                            <RadzenIcon Icon="volume_up" class="noselect"/>
                                        </div>
                                    </div>
                                </RadzenPanel>
                            </RadzenStack>
                        </div>
                        <div class="col-6">
                            <RadzenPanel class="panel">
                                <div style="height: 8rem; overflow-y: auto;">
                                    @foreach (var evidenceGroup in modelGhost.Evidences
                                                  .GroupBy(x => x.Key)
                                                  .OrderBy(x => x.Key)
                                                  .Where(x => x.Key != EvidenceType.Standard)
                                                  .ToDictionary(x => x.Key, x => x.SelectMany(x => x.Value)))
                                    {
                                        <div style="font-size: 1.0rem;">
                                            <p class="noselect">
                                                @Localization[evidenceGroup.Key.GetCaption()]
                                            </p>
                                        </div>
                                        foreach (var hiddenEvidence in evidenceGroup.Value)
                                        {
                                            <div style="font-size: 0.9rem; @color">
                                                <p class="noselect description-text">
                                                    - @hiddenEvidence.Description?.Text
                                                </p>
                                                @if (!string.IsNullOrEmpty(hiddenEvidence.Description?.FilePath))
                                                {
                                                    switch (hiddenEvidence.Description.EvidenceDescriptionType)
                                                    {
                                                        case EvidenceDescriptionType.Video:
                                                            <RadzenIcon Icon="videocam" class="noselect"/>
                                                            break;
                                                        case EvidenceDescriptionType.Audio:
                                                            <audio id="sound" src="@($"/media/{hiddenEvidence.Description.FilePath}")"></audio>
                                                            <RadzenIcon Icon="volume_up"
                                                                        class="noselect"
                                                                        @onclick="@(async () => await Js.InvokeAsync<string>("PlayAudio", "sound"))"/>
                                                            break;
                                                        case EvidenceDescriptionType.Picture:
                                                            <RadzenIcon Icon="image" class="noselect"/>
                                                            break;
                                                    }
                                                }
                                            </div>
                                            <br/>
                                        }
                                    }
                                </div>
                            </RadzenPanel>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>